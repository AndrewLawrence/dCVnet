% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dCVnet_utilities.R
\name{parse_dCVnet_input}
\alias{parse_dCVnet_input}
\title{parse_dCVnet_input}
\usage{
parse_dCVnet_input(
  data,
  y,
  family,
  f = "~.",
  offset = NULL,
  yname = "y",
  passNA = FALSE
)
}
\arguments{
\item{data}{a data.frame containing variables needed for the formula (f).}

\item{y}{the outcome (can be numeric vector,
a factor (for binomial / multinomial) or a matrix for cox/mgaussian)}

\item{family}{the model family (see \code{\link{glmnet}})}

\item{f}{a one sided formula.
The RHS must refer to columns in \code{data} and may include
interactions, transformations or expansions (like \code{\link{poly}}, or
\code{\link{log}}).
The formula \emph{must} include an intercept.}

\item{offset}{optional model offset (see \code{\link{glmnet}})}

\item{yname}{an optional label for the outcome / y variable.}

\item{passNA}{should NA values be excluded (FALSE) or passed through (TRUE)?}
}
\value{
a list containing
\itemize{
\item{ \code{y} - outcome}
\item{ \code{x_mat} - predictor matrix
including expansions, interaction terms specified in \code{f}}
\item{ \code{yname} - a variable name for the y-variable }
\item{ \code{family} - the model family }
}
}
\description{
Collate an outcome (y) predictor matrix (x) into a standardised object ready
for dCVnet functions. Optionally x can be a dataframe and a
one-sided formula (f) can be provided to allow interactions,
transformations and expansions using R formula notation.
}
\section{Factor Outcomes}{

For binomial and multinomial families \code{\link[glmnet]{glmnet}}
coerces non-numeric y data to a factor with labels sorted alphabetically.
Numeric y is left unchanged (behaviour verified in version 2.0.18).
This matters because most R functions (e.g. glm) honour the ordering
of the factor levels. A binomial glm fit to a factor with levels
\code{c("control", "case")}, will predict "case" and the model will return
predicted probabilities of being a "case". \code{\link[glmnet]{glmnet}}
will return the predicted probabilities of being "control" because it
follows "case" alphabetically. Currently cannot be avoided while using
glmnet.
To ensure dCVnet results are comparable between glmnet and glm / other
packages an error will be thrown if y is a factor and the levels are not
sorted alphabetically. Factor levels should be corrected such that
levels(y) and sort(levels(y)) agree.
e.g. \code{y <- forcats::fct_recode(y, case = "zcase")}
}

\section{Notes}{

Sparse matrices are not supported by dCVnet.
}

